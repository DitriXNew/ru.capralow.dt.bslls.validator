#Область КвикФиксы

Процедура CanonicalSpellingKeywordsDiagnostic() Экспорт
	
	ВОЗВРАТ;
	
КонецПроцедуры

Процедура SemicolonPresenceDiagnostic(А) Экспорт

	А = 1

КонецПроцедуры

Процедура EmptyStatementDiagnostic(А) Экспорт
	
	А = 1;;
	
КонецПроцедуры

#КонецОбласти

#Область ТолькоОшибки

Процедура DeprecatedMessage() Экспорт
	
	Сообщить("DeprecatedMessage");
	
КонецПроцедуры

Процедура EmptyCodeBlockDiagnostic() Экспорт
	
	Если Истина Тогда
		
	КонецЕсли;
	
КонецПроцедуры

Процедура IfElseDuplicatedCodeBlockDiagnostic(А) Экспорт
	
	Если Истина Тогда
		А = 1;
		
	Иначе
		А = 1;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура IfElseDuplicatedConditionDiagnostic(А) Экспорт
	
	Если Истина Тогда
		А = 1;
		
	ИначеЕсли Истина Тогда
		А = 2;
		
	Иначе
		А = 3;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура IfElseIfEndsWithElseDiagnostic(А) Экспорт
	
	Если Истина Тогда
		А = 1;
		
	ИначеЕсли Ложь Тогда
		А = 2;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура MethodSizeDiagnostic(А) Экспорт
	
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	А = 1;
	
КонецПроцедуры

Процедура NestedConstructorsInStructureDeclarationDiagnostic(А) Экспорт
	
	А = Новый Структура("ВложеннаяСтруктура", Новый Структура("ВложеннаяСтруктура", Новый Структура));
	
КонецПроцедуры

Процедура NestedStatementsDiagnostic(А) Экспорт
	
	Если Истина Тогда
		Если Истина Тогда
			Если Истина Тогда
				Если Истина Тогда
					Если Истина Тогда
						А = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура NestedTernaryOperatorDiagnostic(А) Экспорт
	
	А = ?(1 % 15 <> 0, ?( 1 % 5 <> 0, ?(1 % 3 <> 0, 1, "Fizz"), "Buzz"), "FizzBuzz"); 
	
КонецПроцедуры

Процедура NumberOfOptionalParamsDiagnostic(А = 1, Б = 2, В = 3, Г = 4) Экспорт
	
	А = 1;
	
КонецПроцедуры

Процедура NumberOfParamsDiagnostic(А, Б, В, Г, Д, Е, Ж, З) Экспорт
	
	А = 1;
	
КонецПроцедуры

Процедура NumberOfValuesInStructureConstructorDiagnostic(А, Б, В, Г) Экспорт
	
	А = Новый Структура("1, 2, 3, 4", А, Б, В, Г);
	
КонецПроцедуры

Процедура OneStatementPerLineDiagnostic(А, Б) Экспорт
	
	А = 1; Б = 2;
	
КонецПроцедуры

Процедура OrderOfParamsDiagnostic(А = 1, Б) Экспорт
	
	А = 1;
	
КонецПроцедуры

Процедура SelfAssignDiagnostic(А) Экспорт
	
	А = А;
	
КонецПроцедуры

Процедура TryNumberDiagnostic(А) Экспорт
	
	Попытка
		А = Число(1);
	Исключение
		А = 1;
	КонецПопытки;
	
КонецПроцедуры

Процедура UseLessForEachDiagnostic(А, В) Экспорт
	
	Для Каждого Б Из А Цикл
		В = 1;
	КонецЦикла;
	
	В = Б;
	
КонецПроцедуры

Процедура UsingCancelParameterDiagnostic(Отказ) Экспорт
	
	Отказ = Ложь;
	
КонецПроцедуры

Процедура UsingFindElementByStringDiagnostic(А) Экспорт
	
	Справочники.МойСправочник.НайтиПоНаименованию("ААА");
	Справочники.МойСправочник.НайтиПоКоду("ААА");
	
КонецПроцедуры

Процедура YoLetterUsageDiagnostic(А, Ё) Экспорт
	
	А = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ЕстьВEDT

Функция FunctionShouldHaveReturnDiagnostic(А) Экспорт
	
	А = 1;
	
КонецФункции

Процедура LineLengthDiagnostic(А) Экспорт
	
	А = "1234567890" + "1234567890" + "1234567890" + "1234567890" + "1234567890" + "1234567890" + "1234567890" + "1234567890" + "1234567890";
	
КонецПроцедуры

Процедура ProcedureReturnsValueDiagnostic() Экспорт
	
	Возврат 1;
	
КонецПроцедуры

#КонецОбласти
